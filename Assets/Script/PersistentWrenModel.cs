using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PersistentWrenModel
{
    [RealtimeProperty(1, true)]
    private uint _playerID;
    


    [RealtimeProperty(2, true, true)]
    private float _hue1;

    [RealtimeProperty(3, true, true)]
    private float _hue2;

    [RealtimeProperty(4, true, true)]
    private float _hue3;

    [RealtimeProperty(5, true, true)]
    private float _hue4;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PersistentWrenModel : RealtimeModel {
    public uint playerID {
        get {
            return _playerIDProperty.value;
        }
        set {
            if (_playerIDProperty.value == value) return;
            _playerIDProperty.value = value;
            InvalidateReliableLength();
        }
    }
    
    public float hue1 {
        get {
            return _hue1Property.value;
        }
        set {
            if (_hue1Property.value == value) return;
            _hue1Property.value = value;
            InvalidateReliableLength();
            FireHue1DidChange(value);
        }
    }
    
    public float hue2 {
        get {
            return _hue2Property.value;
        }
        set {
            if (_hue2Property.value == value) return;
            _hue2Property.value = value;
            InvalidateReliableLength();
            FireHue2DidChange(value);
        }
    }
    
    public float hue3 {
        get {
            return _hue3Property.value;
        }
        set {
            if (_hue3Property.value == value) return;
            _hue3Property.value = value;
            InvalidateReliableLength();
            FireHue3DidChange(value);
        }
    }
    
    public float hue4 {
        get {
            return _hue4Property.value;
        }
        set {
            if (_hue4Property.value == value) return;
            _hue4Property.value = value;
            InvalidateReliableLength();
            FireHue4DidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(PersistentWrenModel model, T value);
    public event PropertyChangedHandler<float> hue1DidChange;
    public event PropertyChangedHandler<float> hue2DidChange;
    public event PropertyChangedHandler<float> hue3DidChange;
    public event PropertyChangedHandler<float> hue4DidChange;
    
    public enum PropertyID : uint {
        PlayerID = 1,
        Hue1 = 2,
        Hue2 = 3,
        Hue3 = 4,
        Hue4 = 5,
    }
    
    #region Properties
    
    private ReliableProperty<uint> _playerIDProperty;
    
    private ReliableProperty<float> _hue1Property;
    
    private ReliableProperty<float> _hue2Property;
    
    private ReliableProperty<float> _hue3Property;
    
    private ReliableProperty<float> _hue4Property;
    
    #endregion
    
    public PersistentWrenModel() : base(null) {
        _playerIDProperty = new ReliableProperty<uint>(1, _playerID);
        _hue1Property = new ReliableProperty<float>(2, _hue1);
        _hue2Property = new ReliableProperty<float>(3, _hue2);
        _hue3Property = new ReliableProperty<float>(4, _hue3);
        _hue4Property = new ReliableProperty<float>(5, _hue4);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _playerIDProperty.UnsubscribeCallback();
        _hue1Property.UnsubscribeCallback();
        _hue2Property.UnsubscribeCallback();
        _hue3Property.UnsubscribeCallback();
        _hue4Property.UnsubscribeCallback();
    }
    
    private void FireHue1DidChange(float value) {
        try {
            hue1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue2DidChange(float value) {
        try {
            hue2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue3DidChange(float value) {
        try {
            hue3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue4DidChange(float value) {
        try {
            hue4DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _playerIDProperty.WriteLength(context);
        length += _hue1Property.WriteLength(context);
        length += _hue2Property.WriteLength(context);
        length += _hue3Property.WriteLength(context);
        length += _hue4Property.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _playerIDProperty.Write(stream, context);
        writes |= _hue1Property.Write(stream, context);
        writes |= _hue2Property.Write(stream, context);
        writes |= _hue3Property.Write(stream, context);
        writes |= _hue4Property.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.PlayerID: {
                    changed = _playerIDProperty.Read(stream, context);
                    break;
                }
                case (uint) PropertyID.Hue1: {
                    changed = _hue1Property.Read(stream, context);
                    if (changed) FireHue1DidChange(hue1);
                    break;
                }
                case (uint) PropertyID.Hue2: {
                    changed = _hue2Property.Read(stream, context);
                    if (changed) FireHue2DidChange(hue2);
                    break;
                }
                case (uint) PropertyID.Hue3: {
                    changed = _hue3Property.Read(stream, context);
                    if (changed) FireHue3DidChange(hue3);
                    break;
                }
                case (uint) PropertyID.Hue4: {
                    changed = _hue4Property.Read(stream, context);
                    if (changed) FireHue4DidChange(hue4);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _playerID = playerID;
        _hue1 = hue1;
        _hue2 = hue2;
        _hue3 = hue3;
        _hue4 = hue4;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
