using Normal.Realtime;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class WrenNetworkedModel{
    
    [RealtimeProperty(1, true, true)]
    private Color _color;
    
    [RealtimeProperty(2, true, true)]
    private bool _onGround;
    
    [RealtimeProperty(3, true, true)]
    private int _inRace;

    [RealtimeProperty(4, true, true)]
    private bool _exploded;

    [RealtimeProperty(5, false, true)]
    private float _timeValue1;

    
    [RealtimeProperty(6, true, true)]
    private string _name;


    [RealtimeProperty(7, true, true)]
    private Vector3 _interfaceValue1;


    [RealtimeProperty(8, true, true)]
    private Vector3 _interfaceValue2;


    [RealtimeProperty(9, true, true)]
    private Vector3 _interfaceValue3;
    
    [RealtimeProperty(10, true, true)]
    private Vector3 _interfaceValue4;


    [RealtimeProperty(11, true, true)]
    private Vector3 _beaconLocation;

    [RealtimeProperty(12, true, true)]
    private bool  _beaconOn;




    [RealtimeProperty(13, true, true)]
    private float _hue1;


    [RealtimeProperty(14, true, true)]
    private float _hue2;


    [RealtimeProperty(15, true, true)]
    private float _hue3;
    
    [RealtimeProperty(16, true, true)]
    private float _hue4;




   [RealtimeProperty(17, true, true)]
   private uint _playerID;


}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class WrenNetworkedModel : RealtimeModel {
    public float timeValue1 {
        get {
            return _timeValue1Property.value;
        }
        set {
            if (_timeValue1Property.value == value) return;
            _timeValue1Property.value = value;
            InvalidateUnreliableLength();
            FireTimeValue1DidChange(value);
        }
    }
    
    public UnityEngine.Color color {
        get {
            return _colorProperty.value;
        }
        set {
            if (_colorProperty.value == value) return;
            _colorProperty.value = value;
            InvalidateReliableLength();
            FireColorDidChange(value);
        }
    }
    
    public bool onGround {
        get {
            return _onGroundProperty.value;
        }
        set {
            if (_onGroundProperty.value == value) return;
            _onGroundProperty.value = value;
            InvalidateReliableLength();
            FireOnGroundDidChange(value);
        }
    }
    
    public int inRace {
        get {
            return _inRaceProperty.value;
        }
        set {
            if (_inRaceProperty.value == value) return;
            _inRaceProperty.value = value;
            InvalidateReliableLength();
            FireInRaceDidChange(value);
        }
    }
    
    public bool exploded {
        get {
            return _explodedProperty.value;
        }
        set {
            if (_explodedProperty.value == value) return;
            _explodedProperty.value = value;
            InvalidateReliableLength();
            FireExplodedDidChange(value);
        }
    }
    
    public string name {
        get {
            return _nameProperty.value;
        }
        set {
            if (_nameProperty.value == value) return;
            _nameProperty.value = value;
            InvalidateReliableLength();
            FireNameDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 interfaceValue1 {
        get {
            return _interfaceValue1Property.value;
        }
        set {
            if (_interfaceValue1Property.value == value) return;
            _interfaceValue1Property.value = value;
            InvalidateReliableLength();
            FireInterfaceValue1DidChange(value);
        }
    }
    
    public UnityEngine.Vector3 interfaceValue2 {
        get {
            return _interfaceValue2Property.value;
        }
        set {
            if (_interfaceValue2Property.value == value) return;
            _interfaceValue2Property.value = value;
            InvalidateReliableLength();
            FireInterfaceValue2DidChange(value);
        }
    }
    
    public UnityEngine.Vector3 interfaceValue3 {
        get {
            return _interfaceValue3Property.value;
        }
        set {
            if (_interfaceValue3Property.value == value) return;
            _interfaceValue3Property.value = value;
            InvalidateReliableLength();
            FireInterfaceValue3DidChange(value);
        }
    }
    
    public UnityEngine.Vector3 interfaceValue4 {
        get {
            return _interfaceValue4Property.value;
        }
        set {
            if (_interfaceValue4Property.value == value) return;
            _interfaceValue4Property.value = value;
            InvalidateReliableLength();
            FireInterfaceValue4DidChange(value);
        }
    }
    
    public UnityEngine.Vector3 beaconLocation {
        get {
            return _beaconLocationProperty.value;
        }
        set {
            if (_beaconLocationProperty.value == value) return;
            _beaconLocationProperty.value = value;
            InvalidateReliableLength();
            FireBeaconLocationDidChange(value);
        }
    }
    
    public bool beaconOn {
        get {
            return _beaconOnProperty.value;
        }
        set {
            if (_beaconOnProperty.value == value) return;
            _beaconOnProperty.value = value;
            InvalidateReliableLength();
            FireBeaconOnDidChange(value);
        }
    }
    
    public float hue1 {
        get {
            return _hue1Property.value;
        }
        set {
            if (_hue1Property.value == value) return;
            _hue1Property.value = value;
            InvalidateReliableLength();
            FireHue1DidChange(value);
        }
    }
    
    public float hue2 {
        get {
            return _hue2Property.value;
        }
        set {
            if (_hue2Property.value == value) return;
            _hue2Property.value = value;
            InvalidateReliableLength();
            FireHue2DidChange(value);
        }
    }
    
    public float hue3 {
        get {
            return _hue3Property.value;
        }
        set {
            if (_hue3Property.value == value) return;
            _hue3Property.value = value;
            InvalidateReliableLength();
            FireHue3DidChange(value);
        }
    }
    
    public float hue4 {
        get {
            return _hue4Property.value;
        }
        set {
            if (_hue4Property.value == value) return;
            _hue4Property.value = value;
            InvalidateReliableLength();
            FireHue4DidChange(value);
        }
    }
    
    public uint playerID {
        get {
            return _playerIDProperty.value;
        }
        set {
            if (_playerIDProperty.value == value) return;
            _playerIDProperty.value = value;
            InvalidateReliableLength();
            FirePlayerIDDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(WrenNetworkedModel model, T value);
    public event PropertyChangedHandler<UnityEngine.Color> colorDidChange;
    public event PropertyChangedHandler<bool> onGroundDidChange;
    public event PropertyChangedHandler<int> inRaceDidChange;
    public event PropertyChangedHandler<bool> explodedDidChange;
    public event PropertyChangedHandler<float> timeValue1DidChange;
    public event PropertyChangedHandler<string> nameDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> interfaceValue1DidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> interfaceValue2DidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> interfaceValue3DidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> interfaceValue4DidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> beaconLocationDidChange;
    public event PropertyChangedHandler<bool> beaconOnDidChange;
    public event PropertyChangedHandler<float> hue1DidChange;
    public event PropertyChangedHandler<float> hue2DidChange;
    public event PropertyChangedHandler<float> hue3DidChange;
    public event PropertyChangedHandler<float> hue4DidChange;
    public event PropertyChangedHandler<uint> playerIDDidChange;
    
    public enum PropertyID : uint {
        Color = 1,
        OnGround = 2,
        InRace = 3,
        Exploded = 4,
        TimeValue1 = 5,
        Name = 6,
        InterfaceValue1 = 7,
        InterfaceValue2 = 8,
        InterfaceValue3 = 9,
        InterfaceValue4 = 10,
        BeaconLocation = 11,
        BeaconOn = 12,
        Hue1 = 13,
        Hue2 = 14,
        Hue3 = 15,
        Hue4 = 16,
        PlayerID = 17,
    }
    
    #region Properties
    
    private ReliableProperty<UnityEngine.Color> _colorProperty;
    
    private ReliableProperty<bool> _onGroundProperty;
    
    private ReliableProperty<int> _inRaceProperty;
    
    private ReliableProperty<bool> _explodedProperty;
    
    private UnreliableProperty<float> _timeValue1Property;
    
    private ReliableProperty<string> _nameProperty;
    
    private ReliableProperty<UnityEngine.Vector3> _interfaceValue1Property;
    
    private ReliableProperty<UnityEngine.Vector3> _interfaceValue2Property;
    
    private ReliableProperty<UnityEngine.Vector3> _interfaceValue3Property;
    
    private ReliableProperty<UnityEngine.Vector3> _interfaceValue4Property;
    
    private ReliableProperty<UnityEngine.Vector3> _beaconLocationProperty;
    
    private ReliableProperty<bool> _beaconOnProperty;
    
    private ReliableProperty<float> _hue1Property;
    
    private ReliableProperty<float> _hue2Property;
    
    private ReliableProperty<float> _hue3Property;
    
    private ReliableProperty<float> _hue4Property;
    
    private ReliableProperty<uint> _playerIDProperty;
    
    #endregion
    
    public WrenNetworkedModel() : base(null) {
        _colorProperty = new ReliableProperty<UnityEngine.Color>(1, _color);
        _onGroundProperty = new ReliableProperty<bool>(2, _onGround);
        _inRaceProperty = new ReliableProperty<int>(3, _inRace);
        _explodedProperty = new ReliableProperty<bool>(4, _exploded);
        _timeValue1Property = new UnreliableProperty<float>(5, _timeValue1);
        _nameProperty = new ReliableProperty<string>(6, _name);
        _interfaceValue1Property = new ReliableProperty<UnityEngine.Vector3>(7, _interfaceValue1);
        _interfaceValue2Property = new ReliableProperty<UnityEngine.Vector3>(8, _interfaceValue2);
        _interfaceValue3Property = new ReliableProperty<UnityEngine.Vector3>(9, _interfaceValue3);
        _interfaceValue4Property = new ReliableProperty<UnityEngine.Vector3>(10, _interfaceValue4);
        _beaconLocationProperty = new ReliableProperty<UnityEngine.Vector3>(11, _beaconLocation);
        _beaconOnProperty = new ReliableProperty<bool>(12, _beaconOn);
        _hue1Property = new ReliableProperty<float>(13, _hue1);
        _hue2Property = new ReliableProperty<float>(14, _hue2);
        _hue3Property = new ReliableProperty<float>(15, _hue3);
        _hue4Property = new ReliableProperty<float>(16, _hue4);
        _playerIDProperty = new ReliableProperty<uint>(17, _playerID);
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        _colorProperty.UnsubscribeCallback();
        _onGroundProperty.UnsubscribeCallback();
        _inRaceProperty.UnsubscribeCallback();
        _explodedProperty.UnsubscribeCallback();
        _nameProperty.UnsubscribeCallback();
        _interfaceValue1Property.UnsubscribeCallback();
        _interfaceValue2Property.UnsubscribeCallback();
        _interfaceValue3Property.UnsubscribeCallback();
        _interfaceValue4Property.UnsubscribeCallback();
        _beaconLocationProperty.UnsubscribeCallback();
        _beaconOnProperty.UnsubscribeCallback();
        _hue1Property.UnsubscribeCallback();
        _hue2Property.UnsubscribeCallback();
        _hue3Property.UnsubscribeCallback();
        _hue4Property.UnsubscribeCallback();
        _playerIDProperty.UnsubscribeCallback();
    }
    
    private void FireColorDidChange(UnityEngine.Color value) {
        try {
            colorDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireOnGroundDidChange(bool value) {
        try {
            onGroundDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireInRaceDidChange(int value) {
        try {
            inRaceDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireExplodedDidChange(bool value) {
        try {
            explodedDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireTimeValue1DidChange(float value) {
        try {
            timeValue1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireNameDidChange(string value) {
        try {
            nameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireInterfaceValue1DidChange(UnityEngine.Vector3 value) {
        try {
            interfaceValue1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireInterfaceValue2DidChange(UnityEngine.Vector3 value) {
        try {
            interfaceValue2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireInterfaceValue3DidChange(UnityEngine.Vector3 value) {
        try {
            interfaceValue3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireInterfaceValue4DidChange(UnityEngine.Vector3 value) {
        try {
            interfaceValue4DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBeaconLocationDidChange(UnityEngine.Vector3 value) {
        try {
            beaconLocationDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireBeaconOnDidChange(bool value) {
        try {
            beaconOnDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue1DidChange(float value) {
        try {
            hue1DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue2DidChange(float value) {
        try {
            hue2DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue3DidChange(float value) {
        try {
            hue3DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHue4DidChange(float value) {
        try {
            hue4DidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePlayerIDDidChange(uint value) {
        try {
            playerIDDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        var length = 0;
        length += _colorProperty.WriteLength(context);
        length += _onGroundProperty.WriteLength(context);
        length += _inRaceProperty.WriteLength(context);
        length += _explodedProperty.WriteLength(context);
        length += _timeValue1Property.WriteLength(context);
        length += _nameProperty.WriteLength(context);
        length += _interfaceValue1Property.WriteLength(context);
        length += _interfaceValue2Property.WriteLength(context);
        length += _interfaceValue3Property.WriteLength(context);
        length += _interfaceValue4Property.WriteLength(context);
        length += _beaconLocationProperty.WriteLength(context);
        length += _beaconOnProperty.WriteLength(context);
        length += _hue1Property.WriteLength(context);
        length += _hue2Property.WriteLength(context);
        length += _hue3Property.WriteLength(context);
        length += _hue4Property.WriteLength(context);
        length += _playerIDProperty.WriteLength(context);
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var writes = false;
        writes |= _colorProperty.Write(stream, context);
        writes |= _onGroundProperty.Write(stream, context);
        writes |= _inRaceProperty.Write(stream, context);
        writes |= _explodedProperty.Write(stream, context);
        writes |= _timeValue1Property.Write(stream, context);
        writes |= _nameProperty.Write(stream, context);
        writes |= _interfaceValue1Property.Write(stream, context);
        writes |= _interfaceValue2Property.Write(stream, context);
        writes |= _interfaceValue3Property.Write(stream, context);
        writes |= _interfaceValue4Property.Write(stream, context);
        writes |= _beaconLocationProperty.Write(stream, context);
        writes |= _beaconOnProperty.Write(stream, context);
        writes |= _hue1Property.Write(stream, context);
        writes |= _hue2Property.Write(stream, context);
        writes |= _hue3Property.Write(stream, context);
        writes |= _hue4Property.Write(stream, context);
        writes |= _playerIDProperty.Write(stream, context);
        if (writes) InvalidateContextLength(context);
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        var anyPropertiesChanged = false;
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            var changed = false;
            switch (propertyID) {
                case (uint) PropertyID.Color: {
                    changed = _colorProperty.Read(stream, context);
                    if (changed) FireColorDidChange(color);
                    break;
                }
                case (uint) PropertyID.OnGround: {
                    changed = _onGroundProperty.Read(stream, context);
                    if (changed) FireOnGroundDidChange(onGround);
                    break;
                }
                case (uint) PropertyID.InRace: {
                    changed = _inRaceProperty.Read(stream, context);
                    if (changed) FireInRaceDidChange(inRace);
                    break;
                }
                case (uint) PropertyID.Exploded: {
                    changed = _explodedProperty.Read(stream, context);
                    if (changed) FireExplodedDidChange(exploded);
                    break;
                }
                case (uint) PropertyID.TimeValue1: {
                    changed = _timeValue1Property.Read(stream, context);
                    if (changed) FireTimeValue1DidChange(timeValue1);
                    break;
                }
                case (uint) PropertyID.Name: {
                    changed = _nameProperty.Read(stream, context);
                    if (changed) FireNameDidChange(name);
                    break;
                }
                case (uint) PropertyID.InterfaceValue1: {
                    changed = _interfaceValue1Property.Read(stream, context);
                    if (changed) FireInterfaceValue1DidChange(interfaceValue1);
                    break;
                }
                case (uint) PropertyID.InterfaceValue2: {
                    changed = _interfaceValue2Property.Read(stream, context);
                    if (changed) FireInterfaceValue2DidChange(interfaceValue2);
                    break;
                }
                case (uint) PropertyID.InterfaceValue3: {
                    changed = _interfaceValue3Property.Read(stream, context);
                    if (changed) FireInterfaceValue3DidChange(interfaceValue3);
                    break;
                }
                case (uint) PropertyID.InterfaceValue4: {
                    changed = _interfaceValue4Property.Read(stream, context);
                    if (changed) FireInterfaceValue4DidChange(interfaceValue4);
                    break;
                }
                case (uint) PropertyID.BeaconLocation: {
                    changed = _beaconLocationProperty.Read(stream, context);
                    if (changed) FireBeaconLocationDidChange(beaconLocation);
                    break;
                }
                case (uint) PropertyID.BeaconOn: {
                    changed = _beaconOnProperty.Read(stream, context);
                    if (changed) FireBeaconOnDidChange(beaconOn);
                    break;
                }
                case (uint) PropertyID.Hue1: {
                    changed = _hue1Property.Read(stream, context);
                    if (changed) FireHue1DidChange(hue1);
                    break;
                }
                case (uint) PropertyID.Hue2: {
                    changed = _hue2Property.Read(stream, context);
                    if (changed) FireHue2DidChange(hue2);
                    break;
                }
                case (uint) PropertyID.Hue3: {
                    changed = _hue3Property.Read(stream, context);
                    if (changed) FireHue3DidChange(hue3);
                    break;
                }
                case (uint) PropertyID.Hue4: {
                    changed = _hue4Property.Read(stream, context);
                    if (changed) FireHue4DidChange(hue4);
                    break;
                }
                case (uint) PropertyID.PlayerID: {
                    changed = _playerIDProperty.Read(stream, context);
                    if (changed) FirePlayerIDDidChange(playerID);
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
            anyPropertiesChanged |= changed;
        }
        if (anyPropertiesChanged) {
            UpdateBackingFields();
        }
    }
    
    private void UpdateBackingFields() {
        _color = color;
        _onGround = onGround;
        _inRace = inRace;
        _exploded = exploded;
        _timeValue1 = timeValue1;
        _name = name;
        _interfaceValue1 = interfaceValue1;
        _interfaceValue2 = interfaceValue2;
        _interfaceValue3 = interfaceValue3;
        _interfaceValue4 = interfaceValue4;
        _beaconLocation = beaconLocation;
        _beaconOn = beaconOn;
        _hue1 = hue1;
        _hue2 = hue2;
        _hue3 = hue3;
        _hue4 = hue4;
        _playerID = playerID;
    }
    
}
/* ----- End Normal Autogenerated Code ----- */
