#pragma kernel Flow
#pragma kernel Reset

struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tangent;
  float2 uv;
  float debug;
  float life;
};

float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;

int _VertBuffer_COUNT;
int _TransformBuffer_COUNT;

#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/hash.cginc"
#include "../../Chunks/curlNoise.cginc"
#include "../../Chunks/ParticleAxisHelpers.cginc"
#include "../../Chunks/sampleSDF.cginc"


float _SomeFollow;
float3 _FollowPosition;


float _Time;


float _ExplodeTime;
bool _Exploded;

void DoInit( inout Vert vert , float pID ){
    //vert.life = hash(float(pID));
  //  vert.axis = newAxis(float(pID));

      float3 pos = float3(hash(float(pID)*20)-.5,hash(float(pID)*24)-.5 , hash(float(pID)*231)-.5);
    //pos = 0;
   vert.pos= mul( _Transform, float4(pos ,1)).xyz;
}

float3 DoRemitPosition(int p){

    float3 pos = float3(hash(float(p)*20)-.5,hash(float(p)*24)-.5 , hash(float(p)*231)-.5);
    //pos = 0;
   return mul( _Transform, float4(pos ,1)).xyz;
}

float3 DoRemitVelocity(int p){return 0;}





float3 DoForce( inout Vert vert , int pID){
    float3 force = 0;


    float nID = float(pID)/ float(_VertBuffer_COUNT);


    if( _ExplodeTime <= 0 ){


        if( nID > _SomeFollow ){

            force += .4*curlNoise(vert.pos * 10.4 + hash(pID*331) * 30 + float3(0,_Time,0));
        // force +=  mul( _Transform, float4( 0,1 ,0,0)).xyz;


            

            float4 t = sampleSDF(vert.pos);

            float val = t.x - (.02 + .02 * hash(pID *44));

            force -= 10*(val * 10) * t.yzw;

            float3 dir =  vert.pos - mul(_Transform,float4(0,0,0,1)).xyz;
            dir.y = 0;

            float3 crx = cross( normalize(dir) , normalize(float3(hash(pID*10120)-.5,1,hash(pID*10120)-.5)));

            force += 1.2*crx;

            force *= .5;
            
            vert.nor = normalize(t.yzw);

            vert.debug = val * 10;

        }else{

            int oID = (pID + 1) %_VertBuffer_COUNT;

            //force += 100*normalize(vert.pos - _VertBuffer[oID].pos) / normalize(vert.pos - _VertBuffer[oID].pos);
            

            force += 3.4 * (hash( pID*4) * .9 + .2)*curlNoise(vert.pos * 1.4 + hash(pID*331) * 30 + float3(0,_Time ,0));

            float3 d = vert.pos - _FollowPosition;

            force += -8*d * (hash( pID) * .5 + .5);
            

        }



        

    }else{

        float3 outForce = normalize(float3(hash(pID*51)-.5,hash(pID*140)-.5,hash(pID*20)-.5));
        force += outForce * 500;
    
    }





    //force -= vert.pos - mul(_Transform,float4(0,0,0,1)).xyz;


    force *= .0003 * (.3+1.5*hash(pID*1021.))/1.3;

   // vert.nor = mul(rotation(vert.axis,vert.life*10*(hash(float(pID*123))+1)),float4(0,0,1,0)).xyz;
    // Giving the vert a tangent
    //vert.tangent =normalize(cross( vert.axis , normalize( vert.nor )));

    
    return force;
}

float DoLife( Vert v , int pID ){
    return .00001 * (3+sin(float(pID)));
}

float DoDampening( Vert v , int pID){
    return .9;
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint3 id : SV_DispatchThreadID) {
    #include "../../Chunks/SimplifiedSimulation.cginc"
}





#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Reset(uint3 id : SV_DispatchThreadID) {

    int pID = id.x;
        
    pID = safeID(pID,_VertBuffer_COUNT);
    Vert vert = _VertBuffer[pID];



    float3 pos = float3(hash(float(pID)*20)-.5,hash(float(pID)*24)-.5 , hash(float(pID)*231)-.5);


    float3 targetPos = mul( _Transform, float4(pos ,1)).xyz;

    float4 t = sampleSDF(targetPos);

    float val = t.x - .03;

    targetPos -= val  * t.yzw;

    vert.pos = targetPos;
    vert.life = 1;

    _VertBuffer[pID] = vert;


}