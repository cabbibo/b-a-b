#pragma kernel Flow
#pragma kernel Flow2


struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 ogPos;
  float3 axis;
  float life;
};


struct Curve{
  float3 pos;
  float3 dir;
  float3 nor;
  float3 tang;
  float2 ids;
  float width;
  float dist;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Curve> _CurveBuffer;

int _VertBuffer_COUNT;
int _CurveBuffer_COUNT;

#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/hash.cginc"
#include "../../Chunks/curlNoise.cginc"

float _StartLocation;
float _EndLocation;
float _Time;
#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];


  if( vert.life == 0 ){ vert.life = hash(float(pID));}
  


  if( vert.life < 0 ){
   // float3 pos = float3(vert.uv.x/_MapSize,0, vert.uv.y/_MapSize );


    float r = hash( float(pID) + _Time );
    r = lerp(_StartLocation, _EndLocation, r);

   //r = _StartLocation;
    float full = r * float(_CurveBuffer_COUNT);
    float base = floor( full );
    float top = ceil( full );

    float remain = full - base;


    float r2 = hash( float(pID) * 100 + _Time );
    float3 p = lerp( _CurveBuffer[base].pos , _CurveBuffer[top].pos,remain );
    float3 t = lerp( _CurveBuffer[base].tang , _CurveBuffer[top].tang,remain );
    float3 n = lerp( _CurveBuffer[base].nor , _CurveBuffer[top].nor,remain );
    float3 d = lerp( _CurveBuffer[base].dir , _CurveBuffer[top].dir,remain );
    float w  = lerp( _CurveBuffer[base].width , _CurveBuffer[top].width,remain );


    vert.pos    =  _CurveBuffer[base].pos + _CurveBuffer[base].nor *r2 *10;// + (_CurveBuffer[base].nor* (r2)) * w;// + n ; //worldPos(pos);
    vert.vel    = 0;// d * .1;
    vert.life   = abs(vert.life)+1;
    vert.life   %= 1;
    vert.life   += 1;
  
  }else{

    float3 force = float3(0,0,0);
   // force += .4*curlNoise(vert.pos * 3);

    vert.vel += force * .004 * (1+hash(pID*1021.))/2;

    vert.life -= .1* (3+sin(float(pID)));
    vert.pos += vert.vel;

    vert.vel *= .99;

  }


  _VertBuffer[pID] = vert;

}


#include "../../Chunks/ComputeTerrainInfo.cginc"

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow2(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

  int pID = threadID + u3GroupID.x * NR_THREADS;

  pID = safeID(pID,_VertBuffer_COUNT);
  Vert vert = _VertBuffer[pID];




  if( vert.life == 0 ){ vert.life = -1;}
  


  if( vert.life < 0 ){
   // float3 pos = float3(vert.uv.x/_MapSize,0, vert.uv.y/_MapSize );


    vert.pos    =  vert.ogPos;// + (_CurveBuffer[base].nor* (r2)) * w;// + n ; //worldPos(pos);
    vert.vel    = vert.axis * .1;// d * .1;
    vert.life   = abs(vert.life)+1;
    vert.life   %= 1;
    vert.life   += 1;
  
  }else{

    float3 force = float3(0,0,0);
    force += .4*curlNoise(vert.pos * 3);
    force += float3(0,-.4,0);


    vert.vel += force * .004 * (1+hash(pID*1021.))/2;
    vert.life -= .0001* (3+sin(float(pID)));
    vert.pos += vert.vel;

    vert.vel *= .99;
    if( vert.pos.y < heightAtPosition( vert.pos ) ){

      vert.vel =  reflect( vert.vel , getTerrainNormal( vert.pos ) ) * 1.2; 
      vert.pos = worldPos( vert.pos ) + vert.vel;//- normalize(vert.vel);
      //vert.pos += -vert.vel; //heightAtPosition( vert.pos ) + .3;

    }




  }


  _VertBuffer[pID] = vert;

}