#pragma kernel Flow

struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tangent;
  float3 axis;
  float life;
};

float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;

int _VertBuffer_COUNT;

#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"
#include "../../Chunks/hash.cginc"
#include "../../Chunks/curlNoise.cginc"
#include "../../Chunks/ParticleAxisHelpers.cginc"


Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;

Texture2D<float4> _WindMap;
SamplerState sampler_WindMap;
float3 _MapSize;

float3 terrainPos( float3 pos ){
  return float3( pos.x , _HeightMap.SampleLevel(sampler_HeightMap, (((pos.xz+_MapSize.xz/2)) / _MapSize.xz) , 1).x * _MapSize.y*2 , pos.z);
}


float terrainHeight( float3 pos ){
   float h =  _HeightMap.SampleLevel(sampler_HeightMap, (((pos.xz+_MapSize.xz/2)) / _MapSize.xz) , 1).x * _MapSize.y * 2;
   return pos.y - h;
}



float3 getWindPower(float3 pos ){
float2 uv = (pos.xz+_MapSize.xz/2) / _MapSize.xz;

float4 windVal = _WindMap.SampleLevel(sampler_HeightMap, uv , 1);

return windVal.xyz;
}


void DoInit( inout Vert vert , float pID ){
    vert.life = hash(float(pID));
    vert.axis = newAxis(float(pID));
}

float3 DoRemitPosition(int id){
float3 emitPos = float3(hash(float(id)*20)-.5,hash(float(id)*11)-.5, hash(float(id)*231));

emitPos *= 100;
float3 p = mul( _Transform, float4( emitPos,1)).xyz;;

float d = terrainHeight(p);

if( d < 0){
   return  terrainPos(p);

}

return p;
}

float3 DoRemitVelocity(int p){return 0;}


float3 DoForce( inout Vert vert , int pID){
    float3 force = 0;
  //  force += 1.4*curlNoise(vert.pos * .4);
   // force +=  mul( _Transform, float4( 0,1 ,0,0)).xyz;
    force += getWindPower(vert.pos) * 1;
    force *= .001 * (1+hash(pID*1021.))/2;

    float d = terrainHeight(vert.pos);
    if( d < .1 ){
        force += float3(0,1,0) * (.1-d) * .1;
    }



    vert.nor = mul(rotation(vert.axis,vert.life*10*(hash(float(pID*123))+1)),float4(0,0,1,0)).xyz;
    // Giving the vert a tangent
    vert.tangent =normalize(cross( vert.axis , normalize( vert.nor )));
    
    return force;
}

float DoLife( Vert v , int pID ){
    return .0004 * (3+sin(float(pID)));
}

float DoDampening( Vert v , int pID){
    return .98;
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint3 id : SV_DispatchThreadID) {
    #include "../../Chunks/SimplifiedSimulation.cginc"
}