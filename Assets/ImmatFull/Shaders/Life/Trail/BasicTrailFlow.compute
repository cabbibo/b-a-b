#pragma kernel Flow
#pragma kernel FlowWithWren
#pragma kernel Transport

struct Vert{
  float3 pos;
  float3 vel;
  float3 nor;
  float3 tan;
  float2 uv;
  float debug;
  float life;
};

float4x4 _Transform;

RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Vert> _HeadBuffer;

int _ParticlesPerTrail;

int _VertBuffer_COUNT;
int _HeadBuffer_COUNT;
#include "../../Chunks/safeID.cginc"
#include "../../Chunks/snoise.cginc"

#include "../../Chunks/curlNoise.cginc"
#include "../../Chunks/noise.cginc"
#include "../../Chunks/ParticleAxisHelpers.cginc"

float _TailFlowForce;





void DoInit( inout Vert vert , float pID ){

    int whichHead = pID / _ParticlesPerTrail;
    vert.pos = _HeadBuffer[safeID(whichHead,_HeadBuffer_COUNT)].pos;
    //vert.pos = 1000;
   // vert.debug.x = 1;
}

float3 DoRemitPosition(int p){
    int whichHead = p / _ParticlesPerTrail;
   return _HeadBuffer[safeID(whichHead,_HeadBuffer_COUNT)].pos;
}

float3 DoRemitVelocity(int p){return 0;}


float3 DoForce( inout Vert vert , int pID){
    float3 force = 0;

    int idInTrail = pID % _ParticlesPerTrail;
    int whichHead = pID / _ParticlesPerTrail;


    float nID = float(idInTrail)/float(_ParticlesPerTrail);

    Vert head = _HeadBuffer[safeID(whichHead,_HeadBuffer_COUNT)];

  
    float3 targetPos = 0;
    if( idInTrail == 0 ){
        targetPos =head.pos;
    }else{
        targetPos = _VertBuffer[safeID(pID-1,_VertBuffer_COUNT)].pos;
    }
    
    force += targetPos - vert.pos;
    force *= _TailFlowForce * ((1-nID)* .8 + .2);

    float life = _HeadBuffer[safeID(whichHead,_HeadBuffer_COUNT)].life;
    
    // If our head is remitting we need to be remitting too!
    if( life <= 0 || life >= 1){
        vert.pos =head.pos;
        vert.vel = 0;
        force = 0;
    }

    /*if( length(head.pos - vert.pos) > 1){
        vert.pos =head.pos;
    }*/

    //vert.nor = head.nor; //normalize(targetPos -vert.pos);//normalize( vert.vel );
    vert.tan = normalize( cross( vert.nor , float3(1,0,0)));

    vert.life = life;

    //vert.debug =head.debug;
    vert.uv.x = float( idInTrail) / float( _ParticlesPerTrail);
    vert.uv.y = float( whichHead) / float( _HeadBuffer_COUNT);
    

    //force = 0;
    //vert.pos = 0;
    return force;
}


float DoLife( Vert v , int pID ){
    return 0;
}


float DoDampening( Vert v , int pID ){
    return .6;
}


#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Flow(uint3 id : SV_DispatchThreadID) {
    #include "../../Chunks/SimplifiedSimulation.cginc"
}



int _NumVertsPerHair;

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void Transport (uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {


      int pID = threadID + u3GroupID.x * NR_THREADS;

    Vert head = _HeadBuffer[safeID(pID,_HeadBuffer_COUNT)];


    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].pos = head.pos;
    _VertBuffer[safeID(pID,_VertBuffer_COUNT)].vel = head.vel;

      for( int i = _NumVertsPerHair-1; i>0; i--){

        int id1 = safeID(pID*_NumVertsPerHair + i , _VertBuffer_COUNT);
        int id2 = safeID(pID*_NumVertsPerHair + i-1 , _VertBuffer_COUNT);


        _VertBuffer[id1].vel =  _VertBuffer[id2].pos -_VertBuffer[id1].pos;
        _VertBuffer[id1].pos = _VertBuffer[id2].pos; 


      }

}