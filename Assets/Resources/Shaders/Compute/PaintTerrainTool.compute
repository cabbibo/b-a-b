#pragma kernel PaintWind
#pragma kernel PaintFood
#pragma kernel PaintBiome

#include "../Chunks/safeID.cginc"




RWStructuredBuffer<float4> _VectorBuffer;

int _VectorBuffer_COUNT;
float _Delta;


float _Reset;


float4x4 _Transform;
float4x4 _oTransform;
float3 _DeltaPos;


float3 _PaintPosition;
float3 _PaintDirection;
float2 _PaintScreenDirection;
float _PaintSize;
float _PaintOpacity;
float _PaintStrength;
int _WhichBrush;
int _TotalBrushes;


float _Shift;
float _FN;

// resolution of our map painting
 int _Width;

float weight[5] =  {0.227027, 0.1945946, 0.1216216, 0.054054, 0.016216};

Texture2D<float4> _HeightMap;
SamplerState sampler_HeightMap;
float3 _MapSize;

    float3 worldPos( float3 pos ){
        float4 c = _HeightMap.SampleLevel(sampler_HeightMap, (pos.xz) / _MapSize.xz + .5 /1024  , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
        pos.y = _MapSize.y * c.x;//* sin(.1 *length(pos.xz)) ;//c.x * 1000;//_MapHeight;
        return pos;
    }



Texture2D<float4> _UndoTexture;
SamplerState sampler_UndoTexture;



Texture2D<float4> _TextureReset;
SamplerState sampler_TextureReset;


float3 worldPosTexture( float3 pos ){
    float4 c = _TextureReset.SampleLevel(sampler_TextureReset, (pos.xz) / _MapSize.xz + .5 /1024  , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
    pos.y = _MapSize.y * c.x;//* sin(.1 *length(pos.xz)) ;//c.x * 1000;//_MapHeight;
    return pos;
}

  float4 getResetTexture( float3 pos ){
      float4 c = _TextureReset.SampleLevel(sampler_TextureReset, (pos.xz) / _MapSize.xz  + .5 /1024 , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
      return c;
  }


float4 getUndoTexture( float3 pos ){
  float4 c = _UndoTexture.SampleLevel(sampler_UndoTexture, (pos.xz) / _MapSize.xz  + .5 /1024 , 1);//tex2Dlod(_HeightMap , float4(pos.xz * _MapSize,0,0) );
  return c;
}





    float3 getNormal( float3 pos ){

      float delta = .01;
      float3 dU = worldPos( pos + float3(delta,0,0) );
      float3 dD = worldPos( pos + float3(-delta,0,0) );
      float3 dL = worldPos( pos + float3(0,0,delta) );
      float3 dR = worldPos( pos + float3(0,0,-delta) );

      return -normalize(cross(dU.xyz-dD.xyz , dL.xyz-dR.xyz));

    }


float3 getPos( int id ){
  float x = float(id % _Width);
  float z = float(id / _Width);

  float fW = float(_Width);

  float3 pos = float3(
    ((x + .5)/fW-.5) * _MapSize.x,
    0,
    ((z + .5)/fW-.5) * _MapSize.z
  );

  pos.y = _HeightMap.SampleLevel(sampler_HeightMap, float2((x + .5)/ fW , (z + .5) / fW),0)  * _MapSize.y*2;


  return pos;
}


#include "../Chunks/noise.cginc"





#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void PaintWind(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int sID = pID;//safeID( pID , _VectorBuffer_COUNT );

    int baseID = sID ;


    float3 pos = getPos(sID);



    float4 v = _VectorBuffer[baseID];


       float3 dir = v.xyz;
  float3 newVal = 0;

  
        float l = saturate( length(pos - _PaintPosition ) / _PaintSize );
    // updating our windDirection
    if( _WhichBrush == 0  ){
      newVal = float3(_PaintDirection.x , _PaintDirection.y, _PaintDirection.z)  * _PaintOpacity*_PaintStrength;


    }else if( _WhichBrush == 1){
        // Paint Up
        newVal = float3( 0 ,_PaintScreenDirection.y, 0 )* _PaintOpacity*_PaintStrength;
        newVal -= dir * 4 * float3(1,0,1);

    }else if( _WhichBrush == 2){

                // make zero 

        newVal = -dir * 4;

  


    }else if( _WhichBrush ==3){
                // make zero 

        newVal = +dir;

    }else{
    // should never trigger
    }


        newVal = lerp( newVal , float3(0,0,0) , l );
        dir += newVal * .01;

      //  dir = float3(1,0,0);
      if( length(dir)== 0 ){
        dir = float3(0,.00001,0);
      }
        v.xyz = dir;
        
        v.w = length(v.xyz);






    if( _Reset == 1 ){
      v.xyz  = float3(0,.00001,0);
      v.w = 0;
    }


    if( _Reset == 2 ){

      float4 tCol = getResetTexture( pos );
      v = tCol;

    }


    if( _Reset == 3 ){

      float4 tCol = getUndoTexture( pos );
      v= tCol;
    }


    _VectorBuffer[baseID] = v;


}



float4 SetVal( float val , float4 v , int _WhichBrush ){
if( _WhichBrush == 0 ){
  v.x = val;
}else if( _WhichBrush == 1 ){
  v.y = val;
}else if( _WhichBrush == 2 ){
  v.z = val;
}else if( _WhichBrush == 3 ){
  v.w = val;
}

return v;
}

#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void PaintFood(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int sID = pID;//safeID( pID , _VectorBuffer_COUNT );

    int baseID = sID ;


    float3 pos = getPos(sID);

    float4 v = _VectorBuffer[baseID];


     float l = saturate( length(pos - _PaintPosition ) / _PaintSize );

    float val =  v[_WhichBrush];

        val += .04*lerp( _PaintOpacity * _PaintStrength , 0 , l );
     val =  saturate( val);
 



    if( _Reset == 1 ){
      val = 0;
    }


    if( _Reset == 2 ){

      float4 tCol = getResetTexture( pos );
      val = tCol[_WhichBrush];

    }


    if( _Reset == 3 ){

      float4 tCol = getUndoTexture( pos );
      val = tCol[_WhichBrush];
    }


    v = SetVal( val,v, _WhichBrush );

    _VectorBuffer[baseID] = v;


}




#define NR_THREADS 128
[numthreads(NR_THREADS,1,1)]
void PaintBiome(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID) {

    int pID = threadID + u3GroupID.x * NR_THREADS;

    int sID = pID;//safeID( pID , _VectorBuffer_COUNT );

    int baseID = sID ;


    float3 pos = getPos(sID);

    float4 v = _VectorBuffer[baseID];


     float l = saturate( length(pos - _PaintPosition ) / _PaintSize );

    float val =  v[_WhichBrush];

        val += .04*lerp( _PaintOpacity * _PaintStrength , 0 , l );
     val =  saturate( val);
 



    if( _Reset == 1 ){
      val = 0;
    }


    if( _Reset == 2 ){

      float4 tCol = getResetTexture( pos );
      val = tCol[_WhichBrush];

    }


    if( _Reset == 3 ){

      float4 tCol = getUndoTexture( pos );
      val = tCol[_WhichBrush];
    }


    v = SetVal( val,v, _WhichBrush );

    _VectorBuffer[baseID] = v;


}












