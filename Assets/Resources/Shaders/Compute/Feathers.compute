
#pragma kernel Feathers
#pragma kernel Feathers2

#include "../Chunks/noise.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"



float4x4 transform; 

float _Delta;
float _Time;
uint _Pass;
float _SpringDistance;

uint _NumVertsPerHair;
uint _HairsPerPoint;
float _BunchOutForce;
float _HairLength;
float _UpForce;
float _HairVariance;

float3 _HandL;
float3 _HandR;



float3 _PlayerPosition;



struct Vert{
      float3 pos;
      float3 vel;
      float3 nor;
      float3 tan;
      float2 uv;
      float used;
      float3 triIDs;
      float3 triWeights;
      float3 debug;
    };


struct Base{
  float3 pos;
  float3 nor;
  float2 uv;
};


RWStructuredBuffer<Vert> _VertBuffer;
RWStructuredBuffer<Base> _BaseBuffer;
RWStructuredBuffer<int> _TriBuffer;

#include "../Chunks/safeID.cginc"

float3 getVel( float3 p1 , float3 p2 ){

  float3 v = p1 - p2;

  if( length( v ) > .5){ v = normalize( v ) *.5; }
  return v;
  
}

float3 springForce( float3 p1 , float3 p2 , float sl ){
  float3 dif = p1 - p2;
  float l = length(dif);

  if( l > 0 ){
    float d = l - sl;
    return normalize( dif ) * d;
  }else{
    return float3(0,0,0);
  }

}


float4x4 _Transform;

#define NR_THREADS 64

[numthreads(NR_THREADS,1,1)]
void Feathers(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {


  uint pID = threadID + u3GroupID.x * NR_THREADS;


    Vert vert = _VertBuffer[pID];

    Base v1 = _BaseBuffer[(int)vert.triIDs.x];
    Base v2 = _BaseBuffer[(int)vert.triIDs.y];
    Base v3 = _BaseBuffer[(int)vert.triIDs.z];

   v1.pos = mul(_Transform,float4(v1.pos,1)).xyz;
   v2.pos = mul(_Transform,float4(v2.pos,1)).xyz;
   v3.pos = mul(_Transform,float4(v3.pos,1)).xyz;

   v1.nor = normalize(mul(_Transform,float4(v1.nor,0)).xyz);
   v2.nor = normalize(mul(_Transform,float4(v2.nor,0)).xyz);
   v3.nor = normalize(mul(_Transform,float4(v3.nor,0)).xyz);


    if( pID % 2 == 0 ){

        
        vert.pos = v1.pos * vert.triWeights.x +  v2.pos * vert.triWeights.y + v3.pos * vert.triWeights.z;
        vert.nor = v1.nor * vert.triWeights.x +  v2.nor * vert.triWeights.y + v3.nor * vert.triWeights.z;
        vert.uv  = v1.uv  * vert.triWeights.x +  v2.uv  * vert.triWeights.y + v3.uv  * vert.triWeights.z;

    }else{


    }
   
    _VertBuffer[pID] = vert;

  
  
}




[numthreads(NR_THREADS,1,1)]
void Feathers2(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {


  uint pID = threadID + u3GroupID.x * NR_THREADS;


    Vert vert = _VertBuffer[pID];

    if( pID % 2 == 0 ){

    

    }else{

        vert.vel -= (vert.pos - _VertBuffer[pID-1].pos) * .2;
        vert.vel += _VertBuffer[pID-1].nor * .03;
        vert.vel += curlNoise( vert.pos * .2 ) * .01 ;
        vert.pos += vert.vel * 2.;//normalize(vert.nor )*1;
        vert.vel *= .7;
vert.pos = _VertBuffer[pID-1].pos + normalize(_VertBuffer[pID-1].nor);

    }
   
    _VertBuffer[pID] = vert;

  
  
}


