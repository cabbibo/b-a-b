#pragma kernel Feathers

float4x4 transform; 

#include "../Chunks/safeID.cginc" 
#include "../Chunks/Matrix.cginc"
#include "../Chunks/cubicCurve.cginc"

#include "../Chunks/CubicValues.cginc"


float3 _WrenVel;


int _NumScapularRows;

float4x4 _Transform;


float4x4 _Shoulder;
float4x4 _Elbow;
float4x4 _Hand;
float4x4 _Finger;
float4x4 _Chest;

float _Locked;
float _LeftOrRight;

float _ScaleMultiplier;

int _NumPrimaryFeathers;
int _NumPrimaryCoverts;
int _NumLesserCovertRows;
int _NumLesserCovertCols;


float3 shoulder; float3 shoulderU; float3 shoulderR; float3 shoulderF;
float3 elbow; float3 elbowU; float3 elbowR; float3 elbowF;
float3 hand; float3 handU; float3 handR; float3 handF;
float3 finger; float3 fingerU; float3 fingerR; float3 fingerF;
float3 chest; float3 chestU; float3 chestR; float3 chestF;

void setFromMatrix( float4x4 mat , out float3 p , out float3 r, out float3 u  , out float3 f){
  p = mul( mat , float4( 0, 0, 0, 1)).xyz;
  r = _ScaleMultiplier * normalize(mul( mat , float4( 1, 0, 0, 0)).xyz) * (_LeftOrRight);
  u = _ScaleMultiplier * normalize(mul( mat , float4( 0, 1, 0, 0)).xyz);
  f = _ScaleMultiplier * normalize(mul( mat , float4( 0, 0, 1, 0)).xyz);
} 


void SetUpValues(){
  setFromMatrix(_Hand,hand,handR,handU,handF);
  setFromMatrix(_Chest,chest,chestR,chestU,chestF);
  setFromMatrix(_Elbow,elbow,elbowR,elbowU,elbowF);
  setFromMatrix(_Shoulder,shoulder,shoulderR,shoulderU,shoulderF);
  setFromMatrix(_Finger,finger,fingerR,fingerU,fingerF);
}


#include "../Chunks/rotationMatrix.cginc"
#include "../Chunks/translationMatrix.cginc"
#include "../Chunks/scaleMatrix.cginc"
#include "../Chunks/hash.cginc"
#include "../Chunks/snoise.cginc"
#include "../Chunks/curlNoise.cginc"



struct Feather{
  float3 pos;
  float3 vel;
  float featherType;
  float locked;
  float4x4 ltw;
  float3 ogPos;
  float3 ogNor;
  float touchingGround;
  float id;
};

RWStructuredBuffer<Feather> _FeatherBuffer;
float _Time;
float _DT;

float3 v1;
float3 v2;




float _BackAmountOverlapping;
float _BaseDirectionLeftRightNoise;
float _BaseDirectionUpNoise;
float _BaseNoiseSize;
float _BaseNoiseScale;

float _MiddlePrimaryFeatherScaleMultiplier;
float _BasePrimaryFeatherScale;

float _MiddleSecondaryFeatherScaleMultiplier;
float _BaseSecondaryFeatherScale;

float _MiddleCovertsFeatherScaleMultiplier;
float _BaseCovertsFeatherScale;

float3 _Velocity;

float _Explosion;
float3 _ExplosionVector;float _LockStartTime;


float _ResetValue;

float _NoiseSizeForFlutter;
float _MaxFlutter;
float _MinFlutter;
float _MaxFlutterSpeed;
float _MinFlutterSpeed;

float _ReturnToLockTime;
float _ReturnToLockForce;
float _ReturnToLockTimeMultiplier;

float _LockDistance;
float _LockLerp;

float _ExplosionOutForce;
float _ExplosionUpForce;
float _ExplosionVelForce;

float3 _GroundNor;


float _VortexInForce;
float _VortexCurlForce;
float _VortexNoiseForce;
float _VortexNoiseSize;


float _GroundVortexHeight;
float _GroundVortexForce;

float _GroundLockHeight;
float _GroundLockForce;





float _TotalShardsInBody;
float _NumShards;
float _TmpNumShards;
float _ONumShards;

float3 _CollectionPosition;
float _CollectionType;



#include "../Chunks/WingShaderFeatherValues.cginc"
#include "../Chunks/nanCheckFeather.cginc"

//---


#include "../Chunks/terrainData.cginc"


float4x4 _SpecialTarget;
float3 _SpecialLockPos;
float3 _ResetLocation;

#define NR_THREADS 64
[numthreads(NR_THREADS,1,1)]
void Feathers(uint threadID : SV_GroupIndex, uint3 u3GroupID : SV_GroupID, uint3 id : SV_DispatchThreadID) {

  SetUpValues();

  uint pID = threadID + u3GroupID.x * NR_THREADS;

  Feather feather = _FeatherBuffer[pID];
  float3 forcePos = feather.pos;
  float3 vel = feather.vel;

  float3 lockPos;
  float3 lockFwd;
  float3 lockUp;
  float3 lockScale;

  int whichFeatherType = 0;

  if( pID < _NumPrimaryFeathers ){
    whichFeatherType = 0;
    primaryFeathers( pID , lockPos , lockFwd , lockUp , lockScale );
    }else if( pID < _NumPrimaryFeathers + _NumPrimaryCoverts ){
    whichFeatherType = 1; 
    primaryCoverts( pID , lockPos , lockFwd , lockUp , lockScale );
    }else if( pID < _NumPrimaryFeathers + _NumPrimaryCoverts + _NumLesserCovertRows * _NumLesserCovertRows ){
    whichFeatherType = 2; 
    lesserCoverts( pID , lockPos , lockFwd , lockUp , lockScale );
    }else{  
    whichFeatherType = 3; 
    lesserCoverts( pID , lockPos , lockFwd , lockUp , lockScale );
  }

  float3 groundPos; float3 groundNor;


  GetTerrainData( feather.pos , groundPos , groundNor );



  
  if( feather.id < _NumShards && feather.id > _TmpNumShards ){
    feather.locked = 0;
    feather.pos = _CollectionPosition;
    feather.ogNor.x = _CollectionType;
    feather.ogNor.y = 0;
    feather.ogNor.z = 0;
  }

  if( feather.id > _NumShards ){
    vel += curlNoise( feather.pos) * 1;
    feather.locked = 0;
  }

  float3 dif = feather.pos - lockPos;


  if( feather.id < _NumShards ){
    
    /*

    Vortex Position

    */
    
    
    if( _Locked == 0  ){
      // noise for prettiness
      vel += curlNoise( forcePos * _VortexNoiseSize ) * _VortexNoiseForce;//

      // Towards center force
      vel += ( chest-forcePos ) *  _VortexInForce;

      // Curls around normal
      vel += cross( normalize( chest-forcePos) , normalize(groundNor) ) * _VortexCurlForce;
    }



    
    if( _Locked == -1){

      float3 sp = mul(_SpecialTarget, float4(0,0,0,1)).xyz;
      // noise for prettiness
      vel += curlNoise( forcePos * _VortexNoiseSize ) * _VortexNoiseForce;//

      // Towards center force
      vel += ( sp-forcePos ) *  _VortexInForce * 100;

      //vel += float3(0,1,0);

      // Curls around normal
      vel += cross( normalize( sp-forcePos) , normalize(groundNor) ) * _VortexCurlForce;

      vel *= .9;


    }
    

    // EXPLOSITION
    float3 c = curlNoise( forcePos * 1 );

    if( _Explosion == 1 ){
      //vel = 0;
      vel *= float3(1,0,1);
      // Goes BOOM
      vel += (_ExplosionVector * _ExplosionUpForce + c * _ExplosionOutForce );
    }


    // The longer after jumping off, the more force towards original location
    vel -= dif * _ReturnToLockForce * _Locked * pow( clamp((_Time - _LockStartTime ) * _ReturnToLockTimeMultiplier,0,1000000) , 2 );

    vel -= c * .3;



    }else{
    // unlocked
    
    vel += curlNoise( feather.pos) * 1;
    feather.locked = 0;
  }

  
  vel += _WrenVel;

  vel *=  (hash(float(pID)) * .6 + .4);
  if( length( vel ) > 1000 ){
    vel = normalize(vel) * 1000;
  }

  // adding to our force position
  forcePos += vel * _DT * .1;//.001;
  if( length(forcePos - lockPos) > 50){
    forcePos = lockPos + normalize(forcePos - lockPos) * 50;
  }
  // dampening if locked vs not locked
  vel *= .96 - .19 * clamp(_Locked,0,1);




  float3 fPos = forcePos;


  float lerpVal = clamp( 1-max(length( dif )-_LockDistance,0) * _LockLerp , 0, 1);

  float3 fFwd = lerp( normalize(vel) , lockFwd , lerpVal );
  float3 fScale = lerp( .3 * lockScale , lockScale , lerpVal );
  
  float3 fUp = lockUp;


  if( _Locked < .5 ){
    feather.locked = 0;
  }



  if( length( dif ) < _LockDistance && _Locked >= 1  && feather.id < _NumShards){
    feather.locked = 1;
  }
  
  if( feather.locked >= .5 && _Locked >= 1){
    fPos = lockPos;
    fFwd = lockFwd;
    fScale = lockScale;
  }



  /*


  Offsetting ground

  */
  
  // Tells us that we are super close to ground

  GetTerrainData( fPos , groundPos , groundNor );
  if( groundPos.y + _GroundLockHeight > fPos.y ){

    float lVal = clamp( (groundPos.y + _GroundLockHeight - fPos.y)/_GroundLockHeight , 0 , 1);

    feather.touchingGround = 1;
    // fPos.y += lVal * _GroundLockForce;
    
    }else{
    feather.touchingGround = 0;
  }
  


  if( _ResetValue > .5 ){
    
    fPos = lockPos; 
    fUp = lockUp;
    fFwd = lockFwd;
    fScale = lockScale;
    feather.ogPos = fPos;
    feather.ogNor = normalize(lockFwd);
    feather.touchingGround = 0;
    vel = 0;

    
  }
  
  if( _ResetValue > 1.5 && _ResetValue < 2.5 ){

    // reseting at position w/ a bit of offset to give it vortex
    float3 centerPos = _ResetLocation;
    
    if( _Locked == -1  ){
      centerPos = mul(_SpecialTarget, float4(0,0,0,1)).xyz;
    }

    fPos = centerPos + lockUp + lockFwd;  

    fUp =lockUp;
    fFwd = lockFwd;
    fScale = lockScale;
    feather.ogPos = lockPos;
    feather.ogNor = lockFwd;
    feather.touchingGround = 0;
    vel = 0;
  }


  
  if( _ResetValue>2.5){

    feather.pos += _ResetLocation;
    
  }




  //fPos = lockPos;

  float sNoiseSlow = snoise( feather.ogPos * _NoiseSizeForFlutter + _MinFlutterSpeed * _Time) * _MinFlutter;
  float sNoiseFast = snoise( feather.ogPos * _NoiseSizeForFlutter + _MaxFlutterSpeed * _Time) * _MaxFlutter;

  fFwd += fUp *  lerp( sNoiseSlow, sNoiseFast , length(_Velocity)/400 );
  // fFwd = -normalize(cross(normalize(cross( fFwd , fUp )), fFwd));
  fFwd = normalize(fFwd);


  float4x4 t = translationMatrix(fPos);
  float4x4 r = look_at_matrix(fFwd,fUp);
  float4x4 s = scaleMatrix(fScale);


  float4x4 rts =mul(t,mul(r,s));

  
  feather.pos = fPos;//fPos;
  feather.vel = vel;
  feather.featherType = float(whichFeatherType);
  feather.ltw = rts;

  nanCheck(feather);
//}

//feather.newData1 =  _HeightMap.SampleLevel(sampler_HeightMap,.5, 1);

_FeatherBuffer[pID] = feather;


}

